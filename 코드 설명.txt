:root {} 전역변수
box-sizing: border-box; -->패딩, 마진 크기 포함

display: flex;
    justify-content: space-between;; --> div를 사이에 공간 주기
display: flex;
    justify-content: space-around; --> div 주위에 어느 정도의 공간 주기
display: flex;
  flex-direction: column; -->div를 세로로 정렬
display: flex;
  align-items: center; -div안의 아이템들을 가운데 맞춤
position: sticky;
  top: 0;
===>반응형 웹 : 위에 딱 붙어있게

.upNext .item .img {
  flex: 1 1 35%;
  margin-right: var(--padding);
}
.upNext .item .img img {
  width: 100%;
}

.upNext .item .info {
  flex: 1 1 60%;
}

.upNext .item .moreBtn {
  flex: 1 1 50%;
  background-color: var(--white-color);
}
flex: 1 1 35%;  줄어들때나 늘어날때나 1, 1로 정하고 베이시스를 35%로 한다
--> 이미지가 말을 듣지 않는다면 이미지 자체가 반응형이 아니기 때문이다.
div로 둘러싸준 후에 width를 %로 준다 
항상 범위를 작게 작게 해서 줘야 한다

css line clamp
컨텐츠의 내용을 제한하는 것

display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;  ===>2줄로 제한
  overflow: hidden;

calc(var(--padding) / 2);
calc 함수를 이용해서 기존에 padding에 정해놓은 크기의 반만 넣는다.

 margin: 0 auto;

미디어가 786px 이상일 때 괄호안의 내용으로 정의한다.
@media screen and (min-width: 768px) {
  .infoAndUpNext {
    flex-direction: row;
    margin: var(--padding) 0;
  }
}

script의 defer란?

getElementById()
id를 통해 엘리먼트를 반환한다. 만약 document에 구체적인 Id의 엘리먼트가 없다면 null을 반환한다.

querySelector() 
selector의 구체적인 그룹과 일치하는 document 안 첫번째 엘리먼트를 반환한다. 
일치하는게 없으면 null을 반환한다.
const moreBtn = document.querySelector('.info .metadata .titleAndButton .moreBtn');;
const title = document.querySelector('.info .metadata .titleAndButton .title');

moreBtn.addEventListener('click', () => { =>버튼이 클릭되면
    moreBtn.classList.toggle('clicked'); -->moreBtn 클래스를 클릭이 됐는지 안 됏는지를 토글하고
    title.classList.toggle('clamp');=> 타이틀의 클래스를 클램프하라는지 안 하라는지를 토글한다
});

타이틀이 clamp라는 클래스가 생기면 적용된다
.info metadata .titleAndButton .title .clamp {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}
.info .metadata .titleAndButton .moreBtn {
  height: 100%;
  transition: trnsform 300ms ease-in-out; =>애니메이션 주기 
}

버튼이 클릭 되었을 때
.info .metadata .titleAndButton .moreBtn .clicked {
  transform: rotate(180deg);  =>180도로 바꾼다
움직이고 변화가 필요할 때 transform을 사용
}

추가 내용: 유튜브 api를 받아서 동적으로 만들어 보기

 text-transform: uppercase;  -->대문자로

  